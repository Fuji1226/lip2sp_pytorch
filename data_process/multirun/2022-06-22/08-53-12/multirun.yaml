hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params: null
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - model=mspec,world
  job:
    name: make_npz
    chdir: null
    override_dirname: model=mspec,world
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.2.0
    version_base: '1.1'
    cwd: /home/usr4/r70264c/Projects/lip2sp_pytorch/data_process
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/usr4/r70264c/Projects/lip2sp_pytorch/conf
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      wandb_conf: defaults
      test: default
      train: train_1
      model: mspec
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
model:
  name: mspec
  fps: 50
  video_channels: 3
  sampling_rate: 16000
  n_fft: 640
  hop_length: 160
  win_length: 640
  f_min: 0
  f_max: 7600
  n_mel_channels: 80
  gray: false
  delta: true
  frame_period: 10
  length: 300
  reduction_factor: 2
  feature_type: mspec
  in_channels: 5
  res_layers: 5
  glu_layers: 4
  n_layers: 1
  d_model: 128
  n_head: 2
  which_encoder: transformer
  which_decoder: transformer
  which_d: null
  out_channels: 80
  pre_in_channels: 160
  pre_inner_channels: 32
  post_inner_channels: 512
train:
  train_path: /home/usr4/r70264c/dataset/lip/lip_cropped
  test_path: /home/usr4/r70264c/dataset/lip
  train_save_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/result/train
  ckpt_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/check_point
  ckpt_step: 5
  generate_save_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/result/generate
  train_mean_std_path: /home/usr4/r70264c/dataset/lip/np_files/mean_std
  test_mean_std_path: /home/usr4/r70264c/dataset/lip/np_files/mean_std
  train_pre_loaded_path: /home/usr4/r70264c/dataset/lip/np_files/train
  test_pre_loaded_path: /home/usr4/r70264c/dataset/lip/np_files/test
  experiment_name: test
  dropout: 0.1
  use_gc: false
  batch_size: 5
  num_workers: 2
  lr: 0.001
  beta_1: 0.9
  beta_2: 0.999
  weight_decay: 1.0e-06
  max_iter: 5
  max_epoch: 20
  display_test_loss_step: 5
  lr_decay_rate: 0.5
  max_norm: 3.0
  training_method: ss
  num_passes: 1
  mixing_prob: 0.5
  debug: true
test:
  data_path: /home/usr4/r70264c/dataset/lip/lip_cropped
  train_save_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/result/train
  ckpt_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/check_point
  ckpt_step: 5
  generate_save_path: /home/usr4/r70264c/Projects/lip2sp_pytorch/result/generate
  mean_std_path: /home/usr4/r70264c/dataset/lip/np_files/mean_std
  pre_loaded_path: /home/usr4/r70264c/dataset/lip/np_files/test
wandb_conf:
  setup:
    project: test_ito
    entity: null
    mode: online
    name: lip2sp_test
  watch:
    log: all
    log_freq: 100
